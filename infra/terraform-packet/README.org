#+TITLE: Packet Terraform

* Cloud Init
#+begin_src yaml :tangle ./cloud-init.yml :comments none
  #cloud-config

  users:
    - default
    - name: humacs
      gecos: Humacs
      primary_group: humacs
      sudo: ALL=(ALL) NOPASSWD:ALL
      groups: users, admin, docker
      ssh_authorized_keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDfOBYW4JREdUNAUY7k/XWKzH4pdx5GI+IfI67iyak7dvnv0sk3mfVHtNounEQuwW06vRiYLmKAG6BP4i97uvNVfoOIOdUSoaqiM/Q3OMPNUykKqh3kliMgX/tJJEsC27HtiDxrkxmgXbflE/JKc+3pSAYsjJkbeWUb2jmcpH8N2OpxeOLLOUeqZfQNsXVXUbfWFK2IcXUJNXUbuzZ4GiLifEoUfppD37e7V3HpNF+zDFim+5g/CYhqfrmlJ1ZCP2UG2Y8AVHl4N4NP2VHXvhl1dU7GkulU+cBA3BV/WF2e8J3cQCl+OFfRmztGeG4xKQPacNjE73bYI14jTSLOqcvhjwMFkr8t0MUCxmlDj1Nua6f3Js7Ft0zILpI20A4stV7h8f41VIehtNL4O+S21ps5dXz8UWcw90RZOmLSp6FPjFpedGqZcBH8ytMyGFiT4eag3SKQeIjNK2mgeaLqZOD+sEqRVWaQ89EX/loliep53cspa6a6hCUfW7WNuJqBtIUv+z9jfdT+Hv6TiLCQ82uQEhEr1KiWgOfNO7auds1cEoippoxnG9q9+Acw6Fe8laK3L3blHHatjxuMAn4Fp5N5GKBh/GxKMhf1CbMET3Q8HkgkuQqN5pXT+aR/517PYfXTMoGFZHWd87HBGg2MdpxBFnZ5LiqV0ByJvvuigh6C7w== caleb@titanlt
      shell: /bin/bash
      lock_passwd: false

  timezone: Pacific/Auckland

  package_update: true
  package_upgrade: true
  packages:
    - emacs-nox
    - tree
    - iproute2
    - net-tools
    - tcpdump
    - htop
    - iftop
    - tmux
    - tmate
    - bash-completion
    - less
    - xz-utils
    - sudo
    - curl
    - ca-certificates
    - libcap2-bin
    - git
    - openssh-client
    - postgresql-client-12
    - jq
    - inotify-tools
    - xtermcontrol
    - nodejs
    - gnupg2
    - tzdata
    - wget
    - python3-dev
    - xz-utils
    - apache2-utils
    - sqlite3
    - silversearcher-ag
    - build-essential
    - vim
    - rsync
    - unzip
    - iputils-ping
    - file
    - docker.io

  runcmd:
    - curl -Lo /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-$(uname)-amd64
    - chmod +x /usr/local/bin/kind
    - curl -L https://storage.googleapis.com/kubernetes-release/release/v1.18.8/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
    - chmod +x /usr/local/bin/kubectl
    - curl -L https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz | tar --directory /usr/local/bin --extract --xz --strip-components 1 tmate-2.4.0-static-linux-amd64/tmate
    - chmod +x /usr/local/bin/kind
    - curl -L https://get.helm.sh/helm-v3.3.0-linux-amd64.tar.gz | tar --directory /usr/local/bin --extract -xz --strip-components 1 linux-amd64/helm
    - curl -L https://dl.google.com/go/go1.15.linux-amd64.tar.gz | tar --directory /usr/local --extract --ungzip
    - curl -L -o /usr/local/bin/bazel https://github.com/bazelbuild/bazel/releases/download/2.2.0/bazel-2.2.0-linux-x86_64 && chmod +x /usr/local/bin/bazel
    - /bin/env GO111MODULE=on GOPATH=/usr/local/go /usr/local/go/bin/go get golang.org/x/tools/gopls@latest && /bin/env GO111MODULE=on GOPATH=/usr/local/go /usr/local/go/bin/go get -u github.com/stamblerre/gocode
    - chgrp users /var/run/docker.sock
    - mkdir /usr/share/humacs
    - curl -L https://raw.githubusercontent.com/humacs/humacs/main/kind-configs/kind-config.yaml > /usr/share/humacs/kind-cluster+registry.yaml
    - su humacs -c 'echo export "PATH=\$PATH:/usr/local/go/bin" >> /home/humacs/.bashrc'
    - su humacs -c 'bazel'
    - su humacs -c 'git clone --recursive https://github.com/humacs/humacs /home/humacs/humacs'
    - su humacs -c 'cd /home/humacs/humacs && ./install.sh'
    - su humacs -c 'cp /home/humacs/humacs/homedir/.tmate.conf /home/humacs'
    - su humacs -c 'cp /home/humacs/humacs/homedir/.tmux.conf /home/humacs'
    - su humacs -c 'cp /home/humacs/humacs/homedir/.gitconfig /home/humacs'
    - su humacs -c 'git clone https://github.com/cncf/apisnoop /home/humacs/apisnoop'
    - su humacs -c 'kind create cluster --config /usr/share/humacs/kind-cluster+registry.yaml'
    - su humacs -c 'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml'
    - su humacs -c 'echo Waiting for nginx-ingress && kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s'
    - su humacs -c 'cd /home/humacs/apisnoop && export CURRENT_IP=127.0.0.1 NEW_IP=$(curl -4 ifconfig.co) && sed -i s:$CURRENT_IP:$NEW_IP:g kustomize/*yaml'
    - su humacs -c 'cd /home/humacs/apisnoop && kubectl apply -k kustomize'

  output:
    all: '| tee -a /var/log/cloud-init-output.log'
#+end_src

* Terraform
** Define
Define the compute:
#+begin_src terraform :tangle ./terraform.tf
  variable "auth_token" {
    description = "Token for Packet API"
  }

  provider "packet" {
      auth_token = var.auth_token
  }

  resource "random_string" "suffix" {
    length  = 8
    special = false
  }

  variable "region" {
    default     = "nrt1"
    description = "Packet region"
  }

  variable "project_id" {
    description = "Packet region"
  }

  variable "hostname" {
    default = "humacs"
    description = "The hostname for the box"
  }

  variable "box_type" {
    default = "x1.small.x86"
    description = "The size of the box"
  }

  variable "operating_system" {
    default = "ubuntu_20_04"
    description = "The OS for the box"
  }

  variable "owner" {
    description = "The name of Humacs"
  }

  data "template_file" "user_data" {
    template = "${file("cloud-init.yml")}"
  }

  resource "packet_device" "box" {
    hostname         = "${var.hostname}-${var.owner != "" ? var.owner : random_string.suffix.result}"
    plan             = var.box_type
    facilities       = [var.region]
    operating_system = var.operating_system
    billing_cycle    = "hourly"
    project_id       = var.project_id
    user_data        = data.template_file.user_data.rendered
  }

  output "packet_device_id" {
    description = "ID of the Packet box"
    value       = packet_device.box.id
  }

  output "packet_device_state" {
    description = "State of the Packet box"
    value       = packet_device.box.state
  }

  output "packet_device_ip" {
    description = "IP address of the Packet box"
    value       = packet_device.box.access_public_ipv4
  }
#+end_src

** Init
Initialize the local environment:
#+begin_src shell
  terraform init
#+end_src

#+RESULTS:
#+begin_example

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

,* provider.packet: version = "~> 3.0"
,* provider.random: version = "~> 2.3"
,* provider.template: version = "~> 2.1"

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
#+end_example

** Plan
Plan and ensure that the resources to create are correct:
#+begin_src shell :async yes
  terraform plan
#+end_src

#+RESULTS:
#+begin_example
#+end_example

** Set credentials
   Use the following strings in a ~:~ minibuffer:
#+begin_src elisp :results none
  (setenv "PACKET_PROJECT_ID" (read-from-minibuffer "PACKET_PROJECT_ID: "))
  (setenv "PACKET_AUTH_TOKEN" (read-from-minibuffer "PACKET_AUTH_TOKEN: "))
#+end_src

#+name: get-packet-project-id
#+begin_src elisp
  (getenv "PACKET_PROJECT_ID")
#+end_src

#+name: get-packet-auth-token
#+begin_src elisp
  (getenv "PACKET_AUTH_TOKEN")
#+end_src

** Create the compute
   Create a box, setting it's name to have your $USER appended
#+begin_src tmate :window packet-terraform :session packet-terraform :noweb yes
  export TF_VAR_owner="$USER"
  export TF_VAR_project_id=<<get-packet-project-id()>>
      export TF_VAR_auth_token=<<get-packet-auth-token()>>
  terraform apply
#+end_src
