kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  version: ${KUBERNETES_VERSION}
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: PacketMachineTemplate
    name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
          audit-policy-file: /etc/kubernetes/pki/audit-policy.yaml
          audit-log-path: "-"
          audit-webhook-config-file: /etc/kubernetes/pki/audit-sink.yaml
          v: 99
      controllerManager:
        extraArgs:
          cloud-provider: external
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    postKubeadmCommands:
    - |
        cat <<EOF >> /etc/network/interfaces
        auto lo:0
        iface lo:0 inet static
          address {{ .controlPlaneEndpoint }}
          netmask 255.255.255.255
        EOF
    - systemctl restart networking
    - 'kubectl --kubeconfig /etc/kubernetes/admin.conf create secret generic -n kube-system packet-cloud-config --from-literal=cloud-sa.json=''{"apiKey": "{{ .apiKey }}","projectID": "${PROJECT_ID}", "eipTag": "cluster-api-provider-packet:cluster-id:${CLUSTER_NAME}"}'''
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/packet-ccm/releases/download/v1.1.0/deployment.yaml
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/csi-packet/raw/master/deploy/kubernetes/setup.yaml
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/csi-packet/raw/master/deploy/kubernetes/node.yaml
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/csi-packet/raw/master/deploy/kubernetes/controller.yaml
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')?IPALLOC_RANGE=172.26.0.0/16"
    preKubeadmCommands:
    - mkdir -p /etc/kubernetes/pki
    - |
        cat <<EOF >> /etc/kubernetes/pki/audit-policy.yaml
        apiVersion: audit.k8s.io/v1
        kind: Policy
        rules:
          - level: RequestResponse
        EOF
    - |
        cat <<EOF >> /etc/kubernetes/pki/audit-sink.yaml
        apiVersion: v1
        kind: Config
        clusters:
          - cluster:
              server: http://10.96.96.96:9900/events
              name: auditsink-cluster
        contexts:
          - context:
              cluster: auditsink-cluster
              user: ""
            name: auditsink-context
        current-context: auditsink-context
        users: []
        preferences: {}
        EOF
    - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
    - swapoff -a
    - mount -a
    - apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
    - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - apt-key fingerprint 0EBFCD88
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - apt-get update -y
    - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet kubeadm kubectl
    - systemctl daemon-reload
    - systemctl enable docker
    - systemctl start docker
    - ping -c 3 -q {{ .controlPlaneEndpoint }} && echo OK || ip addr add {{ .controlPlaneEndpoint }} dev lo
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      OS: "${NODE_OS}"
      billingCycle: hourly
      machineType: "${WORKER_NODE_TYPE}"
      sshKeys:
      - "${SSH_KEY}"
      tags: []
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["${POD_CIDR}"]
    services:
      cidrBlocks: ["${SERVICE_CIDR}"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: PacketCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  projectID: "${PROJECT_ID}"
  facility: "${FACILITY}"
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-worker-a
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    pool: worker-a
spec:
  replicas: ${WORKER_MACHINE_COUNT}
  clusterName: ${CLUSTER_NAME}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
      pool: worker-a
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
        pool: worker-a
    spec:
      version: ${KUBERNETES_VERSION}
      clusterName: ${CLUSTER_NAME}
      bootstrap:
        configRef:
          name: ${CLUSTER_NAME}-worker-a
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: ${CLUSTER_NAME}-worker-a
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: PacketMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-worker-a
spec:
  template:
    spec:
      OS: "${NODE_OS}"
      billingCycle: hourly
      machineType: "${WORKER_NODE_TYPE}"
      sshKeys:
      - "${SSH_KEY}"
      tags: []
---
kind: KubeadmConfigTemplate
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-worker-a"
spec:
  template:
    spec:
      preKubeadmCommands:
        - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
        - swapoff -a
        - mount -a
        - apt-get -y update
        - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
        - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - apt-key fingerprint 0EBFCD88
        - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - apt-get update -y
        - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet kubeadm kubectl
        - systemctl daemon-reload
        - systemctl enable docker
        - systemctl start docker
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
